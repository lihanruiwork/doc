* 有权访问另一个函数作用域中的变量的函数
* 在一个函数内部创建另一个函数
  * 内部函数的作用域链包含外部函数的作用域
  * 在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位，直至作为作用域链终点的全局执行环境。
  * 读取或写入变量的值时，在作用域链中查找变量。
  * 一般来讲，当函数执行完毕后，局部活动对象就会被销毁，内存中仅保存全局执行环境的变量对象。
  * 内部函数会将外部函数的活动对象添加到它的作用域链中。
  * 外部函数执行完毕后，其执行环境的作用域链会被销毁，但其活动对象仍然留在内存中，因为内部函数的作用域链仍然在引用这个活动对象。
* 使用闭包内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题。
* 在退出包含函数后把所有不用的活动对象设为null，确保内存回收
* 闭包可以改变函数内部的值，这一点要注意。
* 闭包可能会引起内存泄漏
```
function f1(){
　　var n=999;
　　function f2(){ 　　　　alert(n);  　　}
　　return f2;
}

var result=f1();
result(); // 999
```
* f2就是一个闭包
